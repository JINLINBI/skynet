/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: pieces.proto */

#ifndef PROTOBUF_C_pieces_2eproto__INCLUDED
#define PROTOBUF_C_pieces_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _PiecesBool PiecesBool;
typedef struct _PiecesInt32 PiecesInt32;
typedef struct _PiecesInt64 PiecesInt64;
typedef struct _PiecesData PiecesData;


/* --- enums --- */

typedef enum _PiecesType {
  PIECES_TYPE__UNKNOWN = 0,
  PIECES_TYPE__USER = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PIECES_TYPE)
} PiecesType;

/* --- messages --- */

struct  _PiecesBool
{
  ProtobufCMessage base;
  int32_t id;
  protobuf_c_boolean data;
};
#define PIECES_BOOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pieces_bool__descriptor) \
    , 0, 0 }


struct  _PiecesInt32
{
  ProtobufCMessage base;
  int32_t id;
  int32_t data;
};
#define PIECES_INT32__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pieces_int32__descriptor) \
    , 0, 0 }


struct  _PiecesInt64
{
  ProtobufCMessage base;
  int32_t id;
  int64_t data;
};
#define PIECES_INT64__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pieces_int64__descriptor) \
    , 0, 0 }


struct  _PiecesData
{
  ProtobufCMessage base;
  size_t n_bool_data;
  PiecesBool **bool_data;
  size_t n_int32_data;
  PiecesInt32 **int32_data;
  size_t n_int64_data;
  PiecesInt64 **int64_data;
};
#define PIECES_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pieces_data__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL }


/* PiecesBool methods */
void   pieces_bool__init
                     (PiecesBool         *message);
size_t pieces_bool__get_packed_size
                     (const PiecesBool   *message);
size_t pieces_bool__pack
                     (const PiecesBool   *message,
                      uint8_t             *out);
size_t pieces_bool__pack_to_buffer
                     (const PiecesBool   *message,
                      ProtobufCBuffer     *buffer);
PiecesBool *
       pieces_bool__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pieces_bool__free_unpacked
                     (PiecesBool *message,
                      ProtobufCAllocator *allocator);
/* PiecesInt32 methods */
void   pieces_int32__init
                     (PiecesInt32         *message);
size_t pieces_int32__get_packed_size
                     (const PiecesInt32   *message);
size_t pieces_int32__pack
                     (const PiecesInt32   *message,
                      uint8_t             *out);
size_t pieces_int32__pack_to_buffer
                     (const PiecesInt32   *message,
                      ProtobufCBuffer     *buffer);
PiecesInt32 *
       pieces_int32__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pieces_int32__free_unpacked
                     (PiecesInt32 *message,
                      ProtobufCAllocator *allocator);
/* PiecesInt64 methods */
void   pieces_int64__init
                     (PiecesInt64         *message);
size_t pieces_int64__get_packed_size
                     (const PiecesInt64   *message);
size_t pieces_int64__pack
                     (const PiecesInt64   *message,
                      uint8_t             *out);
size_t pieces_int64__pack_to_buffer
                     (const PiecesInt64   *message,
                      ProtobufCBuffer     *buffer);
PiecesInt64 *
       pieces_int64__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pieces_int64__free_unpacked
                     (PiecesInt64 *message,
                      ProtobufCAllocator *allocator);
/* PiecesData methods */
void   pieces_data__init
                     (PiecesData         *message);
size_t pieces_data__get_packed_size
                     (const PiecesData   *message);
size_t pieces_data__pack
                     (const PiecesData   *message,
                      uint8_t             *out);
size_t pieces_data__pack_to_buffer
                     (const PiecesData   *message,
                      ProtobufCBuffer     *buffer);
PiecesData *
       pieces_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pieces_data__free_unpacked
                     (PiecesData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*PiecesBool_Closure)
                 (const PiecesBool *message,
                  void *closure_data);
typedef void (*PiecesInt32_Closure)
                 (const PiecesInt32 *message,
                  void *closure_data);
typedef void (*PiecesInt64_Closure)
                 (const PiecesInt64 *message,
                  void *closure_data);
typedef void (*PiecesData_Closure)
                 (const PiecesData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    pieces_type__descriptor;
extern const ProtobufCMessageDescriptor pieces_bool__descriptor;
extern const ProtobufCMessageDescriptor pieces_int32__descriptor;
extern const ProtobufCMessageDescriptor pieces_int64__descriptor;
extern const ProtobufCMessageDescriptor pieces_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_pieces_2eproto__INCLUDED */
